package de.onvif.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import de.onvif.beans.CameraPojo;
import de.onvif.beans.HostRelations;
import de.onvif.beans.Result;
import de.onvif.beans.constant.Constant;
import de.onvif.discovery.OnvifDiscovery;
import de.onvif.utils.RedisUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.net.URL;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

@RestController
public class DeviceController {

    @Autowired
    private RedisUtils redisUtils;

    @RequestMapping(value = "device/queryCameras", method = RequestMethod.GET)
    public Collection<URL> queryCameras() {
        Collection<URL> urls = OnvifDiscovery.discoverOnvifURLs();
        return urls;
    }

    @RequestMapping(value = "device/setCameraServer", method = RequestMethod.POST)
    public Result setCameraServer(@RequestBody CameraPojo cameraPojo) {
        List<String> ips = null;
        if (!CollectionUtils.isEmpty(cameraPojo.getHost()))
            ips = cameraPojo.getHost();
        redisUtils.set(cameraPojo.getIp(), ips);
        if (!StringUtils.isEmpty(cameraPojo.getPlayHost()))
            redisUtils.set(cameraPojo.getIp() + "-play", cameraPojo.getPlayHost());
        return Result.success();
    }

    @RequestMapping(value = "device/getCameraServer", method = RequestMethod.POST)
    public Result getCameraServer(@RequestBody CameraPojo cameraPojo) {
        List<String> ips = new ArrayList<>();
        Object obj = redisUtils.get(cameraPojo.getIp());
        if (obj instanceof ArrayList<?>) {
            for (Object o : (List<?>) obj) {
                ips.add(String.class.cast(o));
            }
        }
        return Result.success(ips);
    }

    @RequestMapping(value = "device/setHostMapping", method = RequestMethod.POST)
    public Result setHostMapping(@RequestBody HostRelations hostRelations) {
        if (hostRelations != null && !StringUtils.isEmpty(hostRelations.getPlayHost())) {
            List<HostRelations> hostRelationss = getHostRelationsListFromRedis();
            if (hostRelationss.contains(hostRelations)) {
                return Result.fail("playHost exist! please check the context!");
            }
            hostRelationss.add(hostRelations);
            redisUtils.set(Constant.HOST_MAPPING, hostRelationss);
        } else {
            return Result.fail("hostRelations is null");
        }
        return Result.success();
    }

    @RequestMapping(value = "device/getHostMapping", method = RequestMethod.GET)
    public Result getHostMapping() {
        List<HostRelations> hostRelationss = getHostRelationsListFromRedis();
        return Result.success(hostRelationss);
    }

    @RequestMapping(value = "device/editHostMapping", method = RequestMethod.POST)
    public Result editHostMapping(@RequestBody HostRelations hostRelations) {
        if (hostRelations != null && !StringUtils.isEmpty(hostRelations.getPlayHost())) {
            List<HostRelations> hostRelationss = getHostRelationsListFromRedis();
            if (!hostRelationss.contains(hostRelations)) {
                return Result.fail("playHost not exist! please refresh the page and try again!");
            }
            hostRelationss.remove(hostRelations);
            hostRelationss.add(hostRelations);
            redisUtils.set(Constant.HOST_MAPPING, hostRelationss);
        } else {
            return Result.fail("hostRelations is null");
        }
        return Result.success();
    }

    @RequestMapping(value = "device/deleteHostMapping", method = RequestMethod.POST)
    public Result deleteHostMapping(@RequestBody HostRelations hostRelations) {
        if (hostRelations != null && !StringUtils.isEmpty(hostRelations.getPlayHost())) {
            List<HostRelations> hostRelationss = getHostRelationsListFromRedis();
            if (!hostRelationss.contains(hostRelations)) {
                return Result.fail("playHost not exist! please refresh the page and try again!");
            }
            hostRelationss.remove(hostRelations);
            redisUtils.set(Constant.HOST_MAPPING, hostRelationss);
        } else {
            return Result.fail("hostRelations is null");
        }
        return Result.success();
    }

    private List<HostRelations> getHostRelationsListFromRedis() {
        List<HostRelations> hostRelationss;
        Object obj = redisUtils.get(Constant.HOST_MAPPING);
        if (obj == null) {
            obj = new LinkedList<HostRelations>();
        }
        hostRelationss = JSONArray.parseArray(JSONObject.toJSONString(obj), HostRelations.class);
        return hostRelationss;
    }

}
